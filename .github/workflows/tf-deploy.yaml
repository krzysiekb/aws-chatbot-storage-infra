name: tf-deploy

on: [push]

env:
  TF_CLOUD_ORGANIZATION: "${{ vars.TF_CLOUD_ORGANIZATION }}"
  TF_WORKSPACE: "${{ vars.TF_WORKSPACE }}"

jobs:
  build-lambda:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set image version
        run: |
          echo "AWS_ECR_IMAGE_REPO=745368277267.dkr.ecr.us-east-1.amazonaws.com" >> "$GITHUB_ENV" 
          echo "IMAGE_NAME=store-message" >> "$GITHUB_ENV" 
          echo "IMAGE_VERSION=0.0.2" >> "$GITHUB_ENV" 

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      # - name: Setup Go
      #   uses: actions/setup-go@v4
      #   with:
      #     go-version: 1.21

      - name: Build store-message lambda docker image
        run: |
          make docker-build
      
      - name: Push store-message lambda docker image to ECR
        run: |
          make docker-push

      # - name: Archive store-message lambda
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: store-message-lambda
      #     path: lambda/store-message/build/main.zip

  deploy-chatbot-storage:
    needs: build-lambda
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set image version
        run: |
          echo "AWS_ECR_IMAGE_REPO=745368277267.dkr.ecr.us-east-1.amazonaws.com" >> "$GITHUB_ENV" 
          echo "IMAGE_NAME=store-message" >> "$GITHUB_ENV" 
          echo "IMAGE_VERSION=0.0.2" >> "$GITHUB_ENV" 

      # - name: Download store-message lambda artifact
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: store-message-lambda
      #     path: prod

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        working-directory: ./prod
        run: |
          terraform init

      - name: Terraform Plan
        working-directory: ./prod
        run: |
          terraform plan
        env:
          TF_VAR_aws_region: ${{ vars.AWS_REGION }}
          TF_VAR_chatbot_storage_messages_ecr_repo: ${{ env.AWS_ECR_IMAGE_REPO }}
          TF_VAR_chatbot_storage_messages_image_name: ${{ env.IMAGE_NAME }}
          TF_VAR_chatbot_storage_messages_image_version: ${{ env.IMAGE_VERSION }}
          # TF_VAR_store_message_lambda_zip_file: main.zip
      
      - name: Terraform Apply
        working-directory: ./prod
        run: |
          terraform apply -auto-approve
        env:
          TF_VAR_aws_region: ${{ vars.AWS_REGION }}
          TF_VAR_chatbot_storage_messages_ecr_repo: ${{ env.AWS_ECR_IMAGE_REPO }}
          TF_VAR_chatbot_storage_messages_image_name: ${{ env.IMAGE_NAME }}
          TF_VAR_chatbot_storage_messages_image_version: ${{ env.IMAGE_VERSION }}
          # TF_VAR_store_message_lambda_zip_file: main.zip
