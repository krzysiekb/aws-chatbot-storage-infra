name: tf-deploy

on: [push]

env:
  TF_CLOUD_ORGANIZATION: "${{ vars.TF_CLOUD_ORGANIZATION }}"
  TF_WORKSPACE: "${{ vars.TF_WORKSPACE }}"
  IMAGE_NAME_STORE_MESSAGE: "store-message"

jobs:
  set-versions:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_VERSION: ${{ steps.set-image-version.outputs.IMAGE_VERSION }}
    steps:
      - name: Set image version
        run: |
          echo "IMAGE_VERSION=0.0.1" | tee -a $GITHUB_ENV $GITHUB_OUTPUT

  build-lambda:
    needs: set-versions
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Test lambda
        run: |
          cd lambda/store-message && go test

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Build store-message lambda docker image
        run: |
          make docker-build
        env:
          AWS_ECR_IMAGE_REPO: "${{ vars.AWS_ECR_IMAGE_REPO }}"
          IMAGE_VERSION: "${{ needs.set-versions.outputs.IMAGE_VERSION }}"
      
      - name: Push store-message lambda docker image to ECR
        run: |
          make docker-push
        env:
          AWS_ECR_IMAGE_REPO: "${{ vars.AWS_ECR_IMAGE_REPO }}"
          IMAGE_VERSION: "${{ needs.set-versions.outputs.IMAGE_VERSION }}"

  deploy-chatbot-storage:
    needs:
      - set-versions
      - build-lambda
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        working-directory: ./prod
        run: |
          terraform init

      - name: Terraform Plan
        working-directory: ./prod
        run: |
          terraform plan
        env:
          TF_VAR_aws_region: ${{ vars.AWS_REGION }}
          TF_VAR_chatbot_storage_messages_ecr_repo: ${{ vars.AWS_ECR_IMAGE_REPO }}
          TF_VAR_chatbot_storage_messages_image_name: ${{ env.IMAGE_NAME_STORE_MESSAGE }}
          TF_VAR_chatbot_storage_messages_image_version: ${{ needs.set-versions.outputs.IMAGE_VERSION }}
      
      - name: Terraform Apply
        working-directory: ./prod
        run: |
          terraform apply -auto-approve
        env:
          TF_VAR_aws_region: ${{ vars.AWS_REGION }}
          TF_VAR_chatbot_storage_messages_ecr_repo: ${{ vars.AWS_ECR_IMAGE_REPO }}
          TF_VAR_chatbot_storage_messages_image_name: ${{ env.IMAGE_NAME_STORE_MESSAGE }}
          TF_VAR_chatbot_storage_messages_image_version: ${{ needs.set-versions.outputs.IMAGE_VERSION }}
