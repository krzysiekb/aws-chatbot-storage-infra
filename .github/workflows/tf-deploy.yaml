name: tf-deploy

on: [push]

env:
  TF_CLOUD_ORGANIZATION: "${{ vars.TF_CLOUD_ORGANIZATION }}"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "${{ vars.TF_WORKSPACE }}"
  CONFIG_DIRECTORY: "./prod"

jobs:
  build-lambda:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Build store-message lambda
        run: |
          make go-build && zip

      - name: Archive store-message lambda
        uses: actions/upload-artifact@v3
        with:
          name: store-message-lambda
          path: lambda/store-message/build/main.zip

  deploy-chatbot-storage:
    needs: build-lambda
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Download store-message lambda artifact
        uses: actions/download-artifact@v3
        with:
          name: store-message-lambda

      - name: AWS authentication
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: plan-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}
          speculative: true

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true
        env:
          TF_VAR_aws_region: ${{ vars.AWS_REGION }}
          TF_VAR_store_message_lambda_zip_file: store-message-lambda.zip
      
      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}
